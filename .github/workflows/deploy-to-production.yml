
name: Build and deploy to production 

on:
  push:
    branches: [ "main" ]
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: guillermoscript/ai-project

jobs:
  build-and-push-image:
    runs-on: ubuntu-20.04
    environment: production
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: putting the enviroment for container
        run: | 
          echo "MONGODB_URI=${{ vars.MONGODB_URI }}" >> .env
          echo "PAYLOAD_SECRET=${{ secrets.PAYLOAD_SECRET }}" >> .env
          echo "SERVER_URL=${{ vars.SERVER_URL }}" >> .env
          echo "OPEN_AI_KEY=${{ secrets.OPEN_AI_KEY }}" >> .env
          echo "CLIENT_ID=${{ vars.CLIENT_ID }}" >> .env
          echo "PAYLOAD_PUBLIC_SITE_URL=${{ vars.PAYLOAD_PUBLIC_SITE_URL }}" >> .env
          echo "PAYLOAD_PUBLIC_SERVER_URL=${{ vars.PAYLOAD_PUBLIC_SERVER_URL }}" >> .env
          echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> .env
          echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
          echo "SMTP_USER=${{ secrets.SMTP_USER }}" >> .env
          echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> .env
          echo "SMTP_FROM=${{ secrets.SMTP_FROM }}" >> .env
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> .env
          echo "NODE_ENV=${{ vars.NODE_ENV }}" >> .env
          echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" >> .env
          echo "STRIPE_WEBHOOKS_ENDPOINT_SECRET=${{ secrets.STRIPE_WEBHOOKS_ENDPOINT_SECRET }}" >> .env
          echo "FLASK_ENV=${{ vars.FLASK_ENV }}" >> .env
          echo "BINANCE_API_KEY=${{ secrets.BINANCE_API_KEY }}" >> .env
          echo "BINANCE_API_KEY_SECRET=${{ secrets.BINANCE_API_KEY_SECRET }}" >> .env
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" >> .env

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/node
          tags: latest

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      
      # - name: build Nodejs app
      #   run: docker build -t ghcr.io/guillermoscript/ai-project/node:latest .

      # - name: build Python app
      #   run: cd ./src/python && docker build -t ghcr.io/guillermoscript/ai-project/python:latest .

      # - name: Log in to the Container registry
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ${{ env.REGISTRY }}
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}
      
      # - name: push python image to registry
      #   run: docker push ghcr.io/guillermoscript/ai-project/python:latest

      # - name: push node image to registry
      #   run: docker push ghcr.io/guillermoscript/ai-project/node:latest
      
      # - name: Deploy to production
      #   uses: fifsky/ssh-action@master
      #   with:
      #     command: |                                                            #TODO: check if this env is injected
      #       docker login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} ${{ env.REGISTRY }}
      #       cd ${{ vars.SERVER_PATH }}
      #       docker compose pull
      #       docker compose up -d --force-recreate
      #       docker rmi -f $(docker images -f "dangling=true" -q)
      #     host: ${{ secrets.SERVER_IP }}
      #     user: ${{ secrets.SERVER_USER }}
      #     key: ${{ secrets.SECRET_KEY }}      
    